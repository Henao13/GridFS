// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Proto/griddfs.proto

#include "Proto/griddfs.pb.h"
#include "Proto/griddfs.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace griddfs {

static const char* NameNodeService_method_names[] = {
  "/griddfs.NameNodeService/LoginUser",
  "/griddfs.NameNodeService/RegisterUser",
  "/griddfs.NameNodeService/CreateFile",
  "/griddfs.NameNodeService/GetFileInfo",
  "/griddfs.NameNodeService/ListFiles",
  "/griddfs.NameNodeService/DeleteFile",
  "/griddfs.NameNodeService/CreateDirectory",
  "/griddfs.NameNodeService/RemoveDirectory",
  "/griddfs.NameNodeService/RegisterDataNode",
  "/griddfs.NameNodeService/Heartbeat",
  "/griddfs.NameNodeService/BlockReport",
};

std::unique_ptr< NameNodeService::Stub> NameNodeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NameNodeService::Stub> stub(new NameNodeService::Stub(channel, options));
  return stub;
}

NameNodeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_LoginUser_(NameNodeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterUser_(NameNodeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateFile_(NameNodeService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFileInfo_(NameNodeService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListFiles_(NameNodeService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteFile_(NameNodeService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDirectory_(NameNodeService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveDirectory_(NameNodeService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterDataNode_(NameNodeService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Heartbeat_(NameNodeService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BlockReport_(NameNodeService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NameNodeService::Stub::LoginUser(::grpc::ClientContext* context, const ::griddfs::LoginRequest& request, ::griddfs::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::griddfs::LoginRequest, ::griddfs::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoginUser_, context, request, response);
}

void NameNodeService::Stub::async::LoginUser(::grpc::ClientContext* context, const ::griddfs::LoginRequest* request, ::griddfs::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::griddfs::LoginRequest, ::griddfs::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoginUser_, context, request, response, std::move(f));
}

void NameNodeService::Stub::async::LoginUser(::grpc::ClientContext* context, const ::griddfs::LoginRequest* request, ::griddfs::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoginUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::griddfs::LoginResponse>* NameNodeService::Stub::PrepareAsyncLoginUserRaw(::grpc::ClientContext* context, const ::griddfs::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::griddfs::LoginResponse, ::griddfs::LoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoginUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::griddfs::LoginResponse>* NameNodeService::Stub::AsyncLoginUserRaw(::grpc::ClientContext* context, const ::griddfs::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NameNodeService::Stub::RegisterUser(::grpc::ClientContext* context, const ::griddfs::RegisterUserRequest& request, ::griddfs::RegisterUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::griddfs::RegisterUserRequest, ::griddfs::RegisterUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterUser_, context, request, response);
}

void NameNodeService::Stub::async::RegisterUser(::grpc::ClientContext* context, const ::griddfs::RegisterUserRequest* request, ::griddfs::RegisterUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::griddfs::RegisterUserRequest, ::griddfs::RegisterUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterUser_, context, request, response, std::move(f));
}

void NameNodeService::Stub::async::RegisterUser(::grpc::ClientContext* context, const ::griddfs::RegisterUserRequest* request, ::griddfs::RegisterUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::griddfs::RegisterUserResponse>* NameNodeService::Stub::PrepareAsyncRegisterUserRaw(::grpc::ClientContext* context, const ::griddfs::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::griddfs::RegisterUserResponse, ::griddfs::RegisterUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::griddfs::RegisterUserResponse>* NameNodeService::Stub::AsyncRegisterUserRaw(::grpc::ClientContext* context, const ::griddfs::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NameNodeService::Stub::CreateFile(::grpc::ClientContext* context, const ::griddfs::CreateFileRequest& request, ::griddfs::CreateFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::griddfs::CreateFileRequest, ::griddfs::CreateFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateFile_, context, request, response);
}

void NameNodeService::Stub::async::CreateFile(::grpc::ClientContext* context, const ::griddfs::CreateFileRequest* request, ::griddfs::CreateFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::griddfs::CreateFileRequest, ::griddfs::CreateFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateFile_, context, request, response, std::move(f));
}

void NameNodeService::Stub::async::CreateFile(::grpc::ClientContext* context, const ::griddfs::CreateFileRequest* request, ::griddfs::CreateFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::griddfs::CreateFileResponse>* NameNodeService::Stub::PrepareAsyncCreateFileRaw(::grpc::ClientContext* context, const ::griddfs::CreateFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::griddfs::CreateFileResponse, ::griddfs::CreateFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::griddfs::CreateFileResponse>* NameNodeService::Stub::AsyncCreateFileRaw(::grpc::ClientContext* context, const ::griddfs::CreateFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NameNodeService::Stub::GetFileInfo(::grpc::ClientContext* context, const ::griddfs::GetFileInfoRequest& request, ::griddfs::GetFileInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::griddfs::GetFileInfoRequest, ::griddfs::GetFileInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFileInfo_, context, request, response);
}

void NameNodeService::Stub::async::GetFileInfo(::grpc::ClientContext* context, const ::griddfs::GetFileInfoRequest* request, ::griddfs::GetFileInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::griddfs::GetFileInfoRequest, ::griddfs::GetFileInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFileInfo_, context, request, response, std::move(f));
}

void NameNodeService::Stub::async::GetFileInfo(::grpc::ClientContext* context, const ::griddfs::GetFileInfoRequest* request, ::griddfs::GetFileInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFileInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::griddfs::GetFileInfoResponse>* NameNodeService::Stub::PrepareAsyncGetFileInfoRaw(::grpc::ClientContext* context, const ::griddfs::GetFileInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::griddfs::GetFileInfoResponse, ::griddfs::GetFileInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFileInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::griddfs::GetFileInfoResponse>* NameNodeService::Stub::AsyncGetFileInfoRaw(::grpc::ClientContext* context, const ::griddfs::GetFileInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFileInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NameNodeService::Stub::ListFiles(::grpc::ClientContext* context, const ::griddfs::ListFilesRequest& request, ::griddfs::ListFilesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::griddfs::ListFilesRequest, ::griddfs::ListFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListFiles_, context, request, response);
}

void NameNodeService::Stub::async::ListFiles(::grpc::ClientContext* context, const ::griddfs::ListFilesRequest* request, ::griddfs::ListFilesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::griddfs::ListFilesRequest, ::griddfs::ListFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListFiles_, context, request, response, std::move(f));
}

void NameNodeService::Stub::async::ListFiles(::grpc::ClientContext* context, const ::griddfs::ListFilesRequest* request, ::griddfs::ListFilesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListFiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::griddfs::ListFilesResponse>* NameNodeService::Stub::PrepareAsyncListFilesRaw(::grpc::ClientContext* context, const ::griddfs::ListFilesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::griddfs::ListFilesResponse, ::griddfs::ListFilesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListFiles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::griddfs::ListFilesResponse>* NameNodeService::Stub::AsyncListFilesRaw(::grpc::ClientContext* context, const ::griddfs::ListFilesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListFilesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NameNodeService::Stub::DeleteFile(::grpc::ClientContext* context, const ::griddfs::DeleteFileRequest& request, ::griddfs::DeleteFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::griddfs::DeleteFileRequest, ::griddfs::DeleteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteFile_, context, request, response);
}

void NameNodeService::Stub::async::DeleteFile(::grpc::ClientContext* context, const ::griddfs::DeleteFileRequest* request, ::griddfs::DeleteFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::griddfs::DeleteFileRequest, ::griddfs::DeleteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteFile_, context, request, response, std::move(f));
}

void NameNodeService::Stub::async::DeleteFile(::grpc::ClientContext* context, const ::griddfs::DeleteFileRequest* request, ::griddfs::DeleteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::griddfs::DeleteFileResponse>* NameNodeService::Stub::PrepareAsyncDeleteFileRaw(::grpc::ClientContext* context, const ::griddfs::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::griddfs::DeleteFileResponse, ::griddfs::DeleteFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::griddfs::DeleteFileResponse>* NameNodeService::Stub::AsyncDeleteFileRaw(::grpc::ClientContext* context, const ::griddfs::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NameNodeService::Stub::CreateDirectory(::grpc::ClientContext* context, const ::griddfs::CreateDirectoryRequest& request, ::griddfs::CreateDirectoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::griddfs::CreateDirectoryRequest, ::griddfs::CreateDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateDirectory_, context, request, response);
}

void NameNodeService::Stub::async::CreateDirectory(::grpc::ClientContext* context, const ::griddfs::CreateDirectoryRequest* request, ::griddfs::CreateDirectoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::griddfs::CreateDirectoryRequest, ::griddfs::CreateDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDirectory_, context, request, response, std::move(f));
}

void NameNodeService::Stub::async::CreateDirectory(::grpc::ClientContext* context, const ::griddfs::CreateDirectoryRequest* request, ::griddfs::CreateDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDirectory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::griddfs::CreateDirectoryResponse>* NameNodeService::Stub::PrepareAsyncCreateDirectoryRaw(::grpc::ClientContext* context, const ::griddfs::CreateDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::griddfs::CreateDirectoryResponse, ::griddfs::CreateDirectoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateDirectory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::griddfs::CreateDirectoryResponse>* NameNodeService::Stub::AsyncCreateDirectoryRaw(::grpc::ClientContext* context, const ::griddfs::CreateDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateDirectoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NameNodeService::Stub::RemoveDirectory(::grpc::ClientContext* context, const ::griddfs::RemoveDirectoryRequest& request, ::griddfs::RemoveDirectoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::griddfs::RemoveDirectoryRequest, ::griddfs::RemoveDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveDirectory_, context, request, response);
}

void NameNodeService::Stub::async::RemoveDirectory(::grpc::ClientContext* context, const ::griddfs::RemoveDirectoryRequest* request, ::griddfs::RemoveDirectoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::griddfs::RemoveDirectoryRequest, ::griddfs::RemoveDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveDirectory_, context, request, response, std::move(f));
}

void NameNodeService::Stub::async::RemoveDirectory(::grpc::ClientContext* context, const ::griddfs::RemoveDirectoryRequest* request, ::griddfs::RemoveDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveDirectory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::griddfs::RemoveDirectoryResponse>* NameNodeService::Stub::PrepareAsyncRemoveDirectoryRaw(::grpc::ClientContext* context, const ::griddfs::RemoveDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::griddfs::RemoveDirectoryResponse, ::griddfs::RemoveDirectoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveDirectory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::griddfs::RemoveDirectoryResponse>* NameNodeService::Stub::AsyncRemoveDirectoryRaw(::grpc::ClientContext* context, const ::griddfs::RemoveDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveDirectoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NameNodeService::Stub::RegisterDataNode(::grpc::ClientContext* context, const ::griddfs::RegisterDataNodeRequest& request, ::griddfs::RegisterDataNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::griddfs::RegisterDataNodeRequest, ::griddfs::RegisterDataNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterDataNode_, context, request, response);
}

void NameNodeService::Stub::async::RegisterDataNode(::grpc::ClientContext* context, const ::griddfs::RegisterDataNodeRequest* request, ::griddfs::RegisterDataNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::griddfs::RegisterDataNodeRequest, ::griddfs::RegisterDataNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterDataNode_, context, request, response, std::move(f));
}

void NameNodeService::Stub::async::RegisterDataNode(::grpc::ClientContext* context, const ::griddfs::RegisterDataNodeRequest* request, ::griddfs::RegisterDataNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterDataNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::griddfs::RegisterDataNodeResponse>* NameNodeService::Stub::PrepareAsyncRegisterDataNodeRaw(::grpc::ClientContext* context, const ::griddfs::RegisterDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::griddfs::RegisterDataNodeResponse, ::griddfs::RegisterDataNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterDataNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::griddfs::RegisterDataNodeResponse>* NameNodeService::Stub::AsyncRegisterDataNodeRaw(::grpc::ClientContext* context, const ::griddfs::RegisterDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterDataNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NameNodeService::Stub::Heartbeat(::grpc::ClientContext* context, const ::griddfs::HeartbeatRequest& request, ::griddfs::HeartbeatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::griddfs::HeartbeatRequest, ::griddfs::HeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Heartbeat_, context, request, response);
}

void NameNodeService::Stub::async::Heartbeat(::grpc::ClientContext* context, const ::griddfs::HeartbeatRequest* request, ::griddfs::HeartbeatResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::griddfs::HeartbeatRequest, ::griddfs::HeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, std::move(f));
}

void NameNodeService::Stub::async::Heartbeat(::grpc::ClientContext* context, const ::griddfs::HeartbeatRequest* request, ::griddfs::HeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::griddfs::HeartbeatResponse>* NameNodeService::Stub::PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::griddfs::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::griddfs::HeartbeatResponse, ::griddfs::HeartbeatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Heartbeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::griddfs::HeartbeatResponse>* NameNodeService::Stub::AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::griddfs::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHeartbeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NameNodeService::Stub::BlockReport(::grpc::ClientContext* context, const ::griddfs::BlockReportRequest& request, ::griddfs::BlockReportResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::griddfs::BlockReportRequest, ::griddfs::BlockReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BlockReport_, context, request, response);
}

void NameNodeService::Stub::async::BlockReport(::grpc::ClientContext* context, const ::griddfs::BlockReportRequest* request, ::griddfs::BlockReportResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::griddfs::BlockReportRequest, ::griddfs::BlockReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BlockReport_, context, request, response, std::move(f));
}

void NameNodeService::Stub::async::BlockReport(::grpc::ClientContext* context, const ::griddfs::BlockReportRequest* request, ::griddfs::BlockReportResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BlockReport_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::griddfs::BlockReportResponse>* NameNodeService::Stub::PrepareAsyncBlockReportRaw(::grpc::ClientContext* context, const ::griddfs::BlockReportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::griddfs::BlockReportResponse, ::griddfs::BlockReportRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BlockReport_, context, request);
}

::grpc::ClientAsyncResponseReader< ::griddfs::BlockReportResponse>* NameNodeService::Stub::AsyncBlockReportRaw(::grpc::ClientContext* context, const ::griddfs::BlockReportRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBlockReportRaw(context, request, cq);
  result->StartCall();
  return result;
}

NameNodeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameNodeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameNodeService::Service, ::griddfs::LoginRequest, ::griddfs::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NameNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::griddfs::LoginRequest* req,
             ::griddfs::LoginResponse* resp) {
               return service->LoginUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameNodeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameNodeService::Service, ::griddfs::RegisterUserRequest, ::griddfs::RegisterUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NameNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::griddfs::RegisterUserRequest* req,
             ::griddfs::RegisterUserResponse* resp) {
               return service->RegisterUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameNodeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameNodeService::Service, ::griddfs::CreateFileRequest, ::griddfs::CreateFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NameNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::griddfs::CreateFileRequest* req,
             ::griddfs::CreateFileResponse* resp) {
               return service->CreateFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameNodeService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameNodeService::Service, ::griddfs::GetFileInfoRequest, ::griddfs::GetFileInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NameNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::griddfs::GetFileInfoRequest* req,
             ::griddfs::GetFileInfoResponse* resp) {
               return service->GetFileInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameNodeService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameNodeService::Service, ::griddfs::ListFilesRequest, ::griddfs::ListFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NameNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::griddfs::ListFilesRequest* req,
             ::griddfs::ListFilesResponse* resp) {
               return service->ListFiles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameNodeService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameNodeService::Service, ::griddfs::DeleteFileRequest, ::griddfs::DeleteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NameNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::griddfs::DeleteFileRequest* req,
             ::griddfs::DeleteFileResponse* resp) {
               return service->DeleteFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameNodeService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameNodeService::Service, ::griddfs::CreateDirectoryRequest, ::griddfs::CreateDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NameNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::griddfs::CreateDirectoryRequest* req,
             ::griddfs::CreateDirectoryResponse* resp) {
               return service->CreateDirectory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameNodeService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameNodeService::Service, ::griddfs::RemoveDirectoryRequest, ::griddfs::RemoveDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NameNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::griddfs::RemoveDirectoryRequest* req,
             ::griddfs::RemoveDirectoryResponse* resp) {
               return service->RemoveDirectory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameNodeService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameNodeService::Service, ::griddfs::RegisterDataNodeRequest, ::griddfs::RegisterDataNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NameNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::griddfs::RegisterDataNodeRequest* req,
             ::griddfs::RegisterDataNodeResponse* resp) {
               return service->RegisterDataNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameNodeService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameNodeService::Service, ::griddfs::HeartbeatRequest, ::griddfs::HeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NameNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::griddfs::HeartbeatRequest* req,
             ::griddfs::HeartbeatResponse* resp) {
               return service->Heartbeat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameNodeService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameNodeService::Service, ::griddfs::BlockReportRequest, ::griddfs::BlockReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NameNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::griddfs::BlockReportRequest* req,
             ::griddfs::BlockReportResponse* resp) {
               return service->BlockReport(ctx, req, resp);
             }, this)));
}

NameNodeService::Service::~Service() {
}

::grpc::Status NameNodeService::Service::LoginUser(::grpc::ServerContext* context, const ::griddfs::LoginRequest* request, ::griddfs::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameNodeService::Service::RegisterUser(::grpc::ServerContext* context, const ::griddfs::RegisterUserRequest* request, ::griddfs::RegisterUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameNodeService::Service::CreateFile(::grpc::ServerContext* context, const ::griddfs::CreateFileRequest* request, ::griddfs::CreateFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameNodeService::Service::GetFileInfo(::grpc::ServerContext* context, const ::griddfs::GetFileInfoRequest* request, ::griddfs::GetFileInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameNodeService::Service::ListFiles(::grpc::ServerContext* context, const ::griddfs::ListFilesRequest* request, ::griddfs::ListFilesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameNodeService::Service::DeleteFile(::grpc::ServerContext* context, const ::griddfs::DeleteFileRequest* request, ::griddfs::DeleteFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameNodeService::Service::CreateDirectory(::grpc::ServerContext* context, const ::griddfs::CreateDirectoryRequest* request, ::griddfs::CreateDirectoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameNodeService::Service::RemoveDirectory(::grpc::ServerContext* context, const ::griddfs::RemoveDirectoryRequest* request, ::griddfs::RemoveDirectoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameNodeService::Service::RegisterDataNode(::grpc::ServerContext* context, const ::griddfs::RegisterDataNodeRequest* request, ::griddfs::RegisterDataNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameNodeService::Service::Heartbeat(::grpc::ServerContext* context, const ::griddfs::HeartbeatRequest* request, ::griddfs::HeartbeatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameNodeService::Service::BlockReport(::grpc::ServerContext* context, const ::griddfs::BlockReportRequest* request, ::griddfs::BlockReportResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DataNodeService_method_names[] = {
  "/griddfs.DataNodeService/WriteBlock",
  "/griddfs.DataNodeService/ReadBlock",
  "/griddfs.DataNodeService/DeleteBlock",
};

std::unique_ptr< DataNodeService::Stub> DataNodeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataNodeService::Stub> stub(new DataNodeService::Stub(channel, options));
  return stub;
}

DataNodeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_WriteBlock_(DataNodeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_ReadBlock_(DataNodeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DeleteBlock_(DataNodeService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::griddfs::WriteBlockRequest>* DataNodeService::Stub::WriteBlockRaw(::grpc::ClientContext* context, ::griddfs::WriteBlockResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::griddfs::WriteBlockRequest>::Create(channel_.get(), rpcmethod_WriteBlock_, context, response);
}

void DataNodeService::Stub::async::WriteBlock(::grpc::ClientContext* context, ::griddfs::WriteBlockResponse* response, ::grpc::ClientWriteReactor< ::griddfs::WriteBlockRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::griddfs::WriteBlockRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_WriteBlock_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::griddfs::WriteBlockRequest>* DataNodeService::Stub::AsyncWriteBlockRaw(::grpc::ClientContext* context, ::griddfs::WriteBlockResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::griddfs::WriteBlockRequest>::Create(channel_.get(), cq, rpcmethod_WriteBlock_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::griddfs::WriteBlockRequest>* DataNodeService::Stub::PrepareAsyncWriteBlockRaw(::grpc::ClientContext* context, ::griddfs::WriteBlockResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::griddfs::WriteBlockRequest>::Create(channel_.get(), cq, rpcmethod_WriteBlock_, context, response, false, nullptr);
}

::grpc::ClientReader< ::griddfs::ReadBlockResponse>* DataNodeService::Stub::ReadBlockRaw(::grpc::ClientContext* context, const ::griddfs::ReadBlockRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::griddfs::ReadBlockResponse>::Create(channel_.get(), rpcmethod_ReadBlock_, context, request);
}

void DataNodeService::Stub::async::ReadBlock(::grpc::ClientContext* context, const ::griddfs::ReadBlockRequest* request, ::grpc::ClientReadReactor< ::griddfs::ReadBlockResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::griddfs::ReadBlockResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ReadBlock_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::griddfs::ReadBlockResponse>* DataNodeService::Stub::AsyncReadBlockRaw(::grpc::ClientContext* context, const ::griddfs::ReadBlockRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::griddfs::ReadBlockResponse>::Create(channel_.get(), cq, rpcmethod_ReadBlock_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::griddfs::ReadBlockResponse>* DataNodeService::Stub::PrepareAsyncReadBlockRaw(::grpc::ClientContext* context, const ::griddfs::ReadBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::griddfs::ReadBlockResponse>::Create(channel_.get(), cq, rpcmethod_ReadBlock_, context, request, false, nullptr);
}

::grpc::Status DataNodeService::Stub::DeleteBlock(::grpc::ClientContext* context, const ::griddfs::DeleteBlockRequest& request, ::griddfs::DeleteBlockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::griddfs::DeleteBlockRequest, ::griddfs::DeleteBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteBlock_, context, request, response);
}

void DataNodeService::Stub::async::DeleteBlock(::grpc::ClientContext* context, const ::griddfs::DeleteBlockRequest* request, ::griddfs::DeleteBlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::griddfs::DeleteBlockRequest, ::griddfs::DeleteBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteBlock_, context, request, response, std::move(f));
}

void DataNodeService::Stub::async::DeleteBlock(::grpc::ClientContext* context, const ::griddfs::DeleteBlockRequest* request, ::griddfs::DeleteBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::griddfs::DeleteBlockResponse>* DataNodeService::Stub::PrepareAsyncDeleteBlockRaw(::grpc::ClientContext* context, const ::griddfs::DeleteBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::griddfs::DeleteBlockResponse, ::griddfs::DeleteBlockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::griddfs::DeleteBlockResponse>* DataNodeService::Stub::AsyncDeleteBlockRaw(::grpc::ClientContext* context, const ::griddfs::DeleteBlockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

DataNodeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataNodeService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< DataNodeService::Service, ::griddfs::WriteBlockRequest, ::griddfs::WriteBlockResponse>(
          [](DataNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::griddfs::WriteBlockRequest>* reader,
             ::griddfs::WriteBlockResponse* resp) {
               return service->WriteBlock(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataNodeService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DataNodeService::Service, ::griddfs::ReadBlockRequest, ::griddfs::ReadBlockResponse>(
          [](DataNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::griddfs::ReadBlockRequest* req,
             ::grpc::ServerWriter<::griddfs::ReadBlockResponse>* writer) {
               return service->ReadBlock(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataNodeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataNodeService::Service, ::griddfs::DeleteBlockRequest, ::griddfs::DeleteBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::griddfs::DeleteBlockRequest* req,
             ::griddfs::DeleteBlockResponse* resp) {
               return service->DeleteBlock(ctx, req, resp);
             }, this)));
}

DataNodeService::Service::~Service() {
}

::grpc::Status DataNodeService::Service::WriteBlock(::grpc::ServerContext* context, ::grpc::ServerReader< ::griddfs::WriteBlockRequest>* reader, ::griddfs::WriteBlockResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataNodeService::Service::ReadBlock(::grpc::ServerContext* context, const ::griddfs::ReadBlockRequest* request, ::grpc::ServerWriter< ::griddfs::ReadBlockResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataNodeService::Service::DeleteBlock(::grpc::ServerContext* context, const ::griddfs::DeleteBlockRequest* request, ::griddfs::DeleteBlockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace griddfs

